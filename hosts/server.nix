{ pkgs, lib, self, ... }:

let
  # TODO: add your public ssh key here to be able to log into the deployed host (as user `me`).
  sshKeys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID7wWcuQm1+P34UvkQiu/fyer+PNyvn+j+uh1MRDyhp5 Generated By Termius"
  ];
  backendPort = "3000";
in  
{
  # Garnix server setup
  garnix.server.enable = true;

  # Enable SSH so we can log in
  services.openssh.enable = true;

  # User 'me' with sudo access
  users.users.me = {
    isNormalUser = true;
    description = "me";
    extraGroups = [ "wheel" "systemd-journal" ];
    openssh.authorizedKeys.keys = sshKeys;
  };

  # Allow sudo without password
  security.sudo.wheelNeedsPassword = false;

  # Packages available on the system
  environment.systemPackages = [
    pkgs.htop
    pkgs.tree
    pkgs.docker         # Docker CLI (rootless mode)
    pkgs.docker-compose # Docker Compose CLI
  ];

  # Backend service
  systemd.services.backend = {
    description = "example go backend";
    wantedBy = [ "multi-user.target" ];
    wants = [ "network-online.target" ];
    serviceConfig = {
      Environment = "PORT=" + backendPort;
      Type = "simple";
      DynamicUser = true;
      ExecStart = lib.getExe self.packages.${pkgs.system}.backend;
    };
  };

  # Nginx setup
  services.nginx = {
    enable = true;
    recommendedProxySettings = true;
    recommendedOptimisation = true;
    recommendedGzipSettings = true;

    virtualHosts."default" = {
      # Serve frontend bundle
      locations."/".root = "${self.packages.${pkgs.system}.frontend-bundle}";
      # Proxy API requests to backend
      locations."/api".proxyPass = "http://localhost:${backendPort}/";
    };
  };

  # Firewall settings left as-is
  networking.firewall.allowedTCPPorts = [ 80 ];

  # Required for Garnix
  nixpkgs.hostPlatform = "x86_64-linux";
}

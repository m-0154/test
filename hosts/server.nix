{ pkgs, lib, self, ... }:

let
  # TODO: add your public ssh key here to be able to log into the deployed host (as user `me`).
  sshKeys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID7wWcuQm1+P34UvkQiu/fyer+PNyvn+j+uh1MRDyhp5 Generated By Termius"
  ];
  backendPort = "3000";
in
{
  # Garnix server setup
  garnix.server.enable = true;

  # Recommended: set system.stateVersion for reproducible behaviour
  system.stateVersion = "24.05";

  # Enable SSH so we can log in
  services.openssh.enable = true;

  # User 'me' with sudo access
  users.users.me = {
    isNormalUser = true;
    description = "me";
    extraGroups = [ "wheel" "systemd-journal" "docker" ];
    openssh.authorizedKeys.keys = sshKeys;
  };

  # Create docker group (so the group exists and we can add users to it)
  users.groups = {
    docker = {};
  };

  # Allow sudo without password
  security.sudo.wheelNeedsPassword = false;

  # Packages available on the system
  environment.systemPackages = [
    pkgs.htop
    pkgs.tree
    pkgs.docker         # Docker CLI
    pkgs.docker-compose # Docker Compose CLI
  ];

  # Use the NixOS docker module but do NOT try to supply hosts via flags (extraOptions)
  # because the module always enables socket activation and writes "fd://" into the
  # generated daemon.json. Passing -H flags together with fd:// causes dockerd to fail.
  # For a stable, compatible setup we:
  #  - enable docker (socket activation remains active)
  #  - do not pass -H flags here
  #  - let the daemon use socket activation (fd://) only
  virtualisation.docker = {
    enable = true;
    # NOTE: Avoid setting extraOptions or socketActivation here — modern modules
    # always enable socket activation and will generate the required config.
  };

  # After dockerd starts it will create /var/run/docker.sock (root:docker, srw-rw----)
  # We ensure the socket has the docker group and readable by that group by running
  # a small ExecStartPost chmod/chgrp. This avoids creating a regular file at that
  # path which would block socket creation.
  systemd.services."docker" = {
    serviceConfig = {
      ExecStartPost = "${pkgs.coreutils}/bin/chown root:docker /var/run/docker.sock && ${pkgs.coreutils}/bin/chmod 0660 /var/run/docker.sock";
    };
  };

  # Backend service
  systemd.services.backend = {
    description = "example go backend";
    wantedBy = [ "multi-user.target" ];
    wants = [ "network-online.target" ];
    serviceConfig = {
      Environment = "PORT=" + backendPort;
      Type = "simple";
      DynamicUser = true;
      ExecStart = lib.getExe self.packages.${pkgs.system}.backend;
    };
  };

  # Nginx setup
  services.nginx = {
    enable = true;
    recommendedProxySettings = true;
    recommendedOptimisation = true;
    recommendedGzipSettings = true;

    virtualHosts."default" = {
      # Serve frontend bundle
      locations."/".root = "${self.packages.${pkgs.system}.frontend-bundle}";
      # Proxy API requests to backend
      locations."/api".proxyPass = "http://localhost:${backendPort}/";
    };
  };

  # Disable firewall entirely (exposes all ports) — WARNING: this exposes the host.
  networking.firewall.enable = false;

  # Required for Garnix
  nixpkgs.hostPlatform = "x86_64-linux";
}
